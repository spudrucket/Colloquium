/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package colloquium;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Mark_K
 */
public class MainWindow extends javax.swing.JFrame {
    
    TableColumn idColumn;
    TableColumn textColumn;
    TableColumn transColumn;
    TableColumn tagsColumn;
    

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        resultsTable.setDefaultRenderer(String.class, new LineWrapCellRenderer());
        
        idColumn = resultsTable.getColumnModel().getColumn(0);
        textColumn = resultsTable.getColumnModel().getColumn(1);
        transColumn = resultsTable.getColumnModel().getColumn(2);
        tagsColumn = resultsTable.getColumnModel().getColumn(3);
        resultsTable.removeColumn(idColumn);
        
        populateTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        ColloquiumPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        tagsQuery = java.beans.Beans.isDesignTime() ? null : ColloquiumPUEntityManager.createQuery("SELECT t FROM Tags t");
        tagsList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : tagsQuery.getResultList();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagsList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        informantsButton = new javax.swing.JButton();
        interviewsButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        showTransCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        addInformantMenuItem = new javax.swing.JMenuItem();
        addInterviewMenuItem = new javax.swing.JMenuItem();
        addTagMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        editInformantsMenuItem = new javax.swing.JMenuItem();
        editInterviewsMenuItem = new javax.swing.JMenuItem();
        editTagsMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        refreshMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tagsList.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tagsList1, tagsList);
        bindingGroup.addBinding(jListBinding);

        jScrollPane1.setViewportView(tagsList);

        jTree1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setRootVisible(false);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTree1);

        resultsTable.setBorder(new javax.swing.border.MatteBorder(null));
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Text", "Translation", "Tags"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        resultsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(resultsTable);
        if (resultsTable.getColumnModel().getColumnCount() > 0) {
            resultsTable.getColumnModel().getColumn(3).setMaxWidth(200);
        }

        jToolBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 1, 5, 1));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setMaximumSize(new java.awt.Dimension(32769, 50));
        jToolBar1.setMinimumSize(new java.awt.Dimension(800, 50));
        jToolBar1.setPreferredSize(new java.awt.Dimension(1284, 50));

        informantsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/colloquium/person-icon.png"))); // NOI18N
        informantsButton.setToolTipText("Informants");
        informantsButton.setFocusable(false);
        informantsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        informantsButton.setMaximumSize(new java.awt.Dimension(47, 47));
        informantsButton.setMinimumSize(new java.awt.Dimension(47, 47));
        informantsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        informantsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informantsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(informantsButton);

        interviewsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/colloquium/text_bubble.png"))); // NOI18N
        interviewsButton.setToolTipText("Interviews");
        interviewsButton.setFocusable(false);
        interviewsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        interviewsButton.setMaximumSize(new java.awt.Dimension(47, 47));
        interviewsButton.setMinimumSize(new java.awt.Dimension(47, 47));
        interviewsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        interviewsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interviewsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(interviewsButton);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/colloquium/tag.png"))); // NOI18N
        jButton1.setToolTipText("Tags");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setMaximumSize(new java.awt.Dimension(47, 47));
        jButton1.setMinimumSize(new java.awt.Dimension(47, 47));
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        showTransCheckBox.setSelected(true);
        showTransCheckBox.setFocusable(false);
        showTransCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showTransCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showTransCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTransCheckBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(showTransCheckBox);

        jLabel1.setText("Show Translation");
        jToolBar1.add(jLabel1);

        jMenu1.setText("File");

        jMenuItem1.setText("New Project");
        jMenuItem1.setToolTipText("");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        addInformantMenuItem.setText("Add Informant");
        addInformantMenuItem.setActionCommand("Add Informants");
        addInformantMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInformantMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(addInformantMenuItem);

        addInterviewMenuItem.setText("Add Interview");
        addInterviewMenuItem.setToolTipText("");
        addInterviewMenuItem.setActionCommand("Add Interviews");
        addInterviewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInterviewMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(addInterviewMenuItem);

        addTagMenuItem.setText("Add Tag");
        addTagMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(addTagMenuItem);
        jMenu1.add(jSeparator2);

        editInformantsMenuItem.setText("Edit Informants");
        editInformantsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editInformantsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(editInformantsMenuItem);

        editInterviewsMenuItem.setText("Edit Interviews");
        editInterviewsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editInterviewsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(editInterviewsMenuItem);

        editTagsMenuItem.setText("Edit Tags");
        editTagsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTagsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(editTagsMenuItem);
        jMenu1.add(jSeparator3);

        refreshMenuItem.setText("Refresh");
        refreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(refreshMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1326, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void popTable(Interviews interview) {
        DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
        model.setRowCount(0);
        
        EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        Query query = entityManager.createNamedQuery("Paragraphs.findByInterviewnumber").setParameter("interviewnumber", interview);
        List<Paragraphs> paragraphsList = query.getResultList();

        for (int i = 0; i < paragraphsList.size(); i++) {
            int data0 = paragraphsList.get(i).getId();
            String data1 = paragraphsList.get(i).getText();
            String data2 = paragraphsList.get(i).getTrans();
            
            ArrayList<Integer> tagsList = new ArrayList();
            tagsList.add(paragraphsList.get(i).getTag00());
            tagsList.add(paragraphsList.get(i).getTag01());
            tagsList.add(paragraphsList.get(i).getTag02());
            tagsList.add(paragraphsList.get(i).getTag03());
            tagsList.add(paragraphsList.get(i).getTag04());
            tagsList.add(paragraphsList.get(i).getTag05());
            tagsList.add(paragraphsList.get(i).getTag06());
            tagsList.add(paragraphsList.get(i).getTag07());
            tagsList.add(paragraphsList.get(i).getTag08());
            tagsList.add(paragraphsList.get(i).getTag09());
            tagsList.add(paragraphsList.get(i).getTag10());
            tagsList.add(paragraphsList.get(i).getTag11());
            tagsList.add(paragraphsList.get(i).getTag12());
            tagsList.add(paragraphsList.get(i).getTag13());
            tagsList.add(paragraphsList.get(i).getTag14());
            tagsList.add(paragraphsList.get(i).getTag15());
            tagsList.add(paragraphsList.get(i).getTag16());
            tagsList.add(paragraphsList.get(i).getTag17());
            tagsList.add(paragraphsList.get(i).getTag18());
            tagsList.add(paragraphsList.get(i).getTag19());
            tagsList.add(paragraphsList.get(i).getTag20());
            tagsList.add(paragraphsList.get(i).getTag21());
            tagsList.add(paragraphsList.get(i).getTag22());
            tagsList.add(paragraphsList.get(i).getTag23());
            tagsList.add(paragraphsList.get(i).getTag24());
            tagsList.add(paragraphsList.get(i).getTag25());
            tagsList.add(paragraphsList.get(i).getTag26());
            tagsList.add(paragraphsList.get(i).getTag27());
            tagsList.add(paragraphsList.get(i).getTag28());
            tagsList.add(paragraphsList.get(i).getTag29());
            tagsList.add(paragraphsList.get(i).getTag30());
            tagsList.add(paragraphsList.get(i).getTag31());
            tagsList.add(paragraphsList.get(i).getTag32());
            tagsList.add(paragraphsList.get(i).getTag33());
            tagsList.add(paragraphsList.get(i).getTag34());
            tagsList.add(paragraphsList.get(i).getTag35());
            tagsList.add(paragraphsList.get(i).getTag36());
            tagsList.add(paragraphsList.get(i).getTag37());
            tagsList.add(paragraphsList.get(i).getTag38());
            tagsList.add(paragraphsList.get(i).getTag39());
            tagsList.add(paragraphsList.get(i).getTag40());
            tagsList.add(paragraphsList.get(i).getTag41());
            tagsList.add(paragraphsList.get(i).getTag42());
            tagsList.add(paragraphsList.get(i).getTag43());
            tagsList.add(paragraphsList.get(i).getTag44());
            tagsList.add(paragraphsList.get(i).getTag45());
            tagsList.add(paragraphsList.get(i).getTag46());
            tagsList.add(paragraphsList.get(i).getTag47());
            tagsList.add(paragraphsList.get(i).getTag48());
            tagsList.add(paragraphsList.get(i).getTag49());
            tagsList.add(paragraphsList.get(i).getTag50());
            tagsList.add(paragraphsList.get(i).getTag51());
            tagsList.add(paragraphsList.get(i).getTag52());
            tagsList.add(paragraphsList.get(i).getTag53());
            tagsList.add(paragraphsList.get(i).getTag54());
            tagsList.add(paragraphsList.get(i).getTag55());
            tagsList.add(paragraphsList.get(i).getTag56());
            tagsList.add(paragraphsList.get(i).getTag57());
            tagsList.add(paragraphsList.get(i).getTag58());
            tagsList.add(paragraphsList.get(i).getTag59());
            tagsList.add(paragraphsList.get(i).getTag60());
            tagsList.add(paragraphsList.get(i).getTag61());
            tagsList.add(paragraphsList.get(i).getTag62());
            tagsList.add(paragraphsList.get(i).getTag63());
            tagsList.add(paragraphsList.get(i).getTag64());
            tagsList.add(paragraphsList.get(i).getTag65());
            tagsList.add(paragraphsList.get(i).getTag66());
            tagsList.add(paragraphsList.get(i).getTag67());
            tagsList.add(paragraphsList.get(i).getTag68());
            tagsList.add(paragraphsList.get(i).getTag69());
            tagsList.add(paragraphsList.get(i).getTag70());
            tagsList.add(paragraphsList.get(i).getTag71());
            tagsList.add(paragraphsList.get(i).getTag72());
            tagsList.add(paragraphsList.get(i).getTag73());
            tagsList.add(paragraphsList.get(i).getTag74());
            tagsList.add(paragraphsList.get(i).getTag75());
            tagsList.add(paragraphsList.get(i).getTag76());
            tagsList.add(paragraphsList.get(i).getTag77());
            tagsList.add(paragraphsList.get(i).getTag78());
            tagsList.add(paragraphsList.get(i).getTag79());
            tagsList.add(paragraphsList.get(i).getTag80());
            tagsList.add(paragraphsList.get(i).getTag81());
            tagsList.add(paragraphsList.get(i).getTag82());
            tagsList.add(paragraphsList.get(i).getTag83());
            tagsList.add(paragraphsList.get(i).getTag84());
            tagsList.add(paragraphsList.get(i).getTag85());
            tagsList.add(paragraphsList.get(i).getTag86());
            tagsList.add(paragraphsList.get(i).getTag87());
            tagsList.add(paragraphsList.get(i).getTag88());
            tagsList.add(paragraphsList.get(i).getTag89());
            tagsList.add(paragraphsList.get(i).getTag90());
            tagsList.add(paragraphsList.get(i).getTag91());
            tagsList.add(paragraphsList.get(i).getTag92());
            tagsList.add(paragraphsList.get(i).getTag93());
            tagsList.add(paragraphsList.get(i).getTag94());
            tagsList.add(paragraphsList.get(i).getTag95());
            tagsList.add(paragraphsList.get(i).getTag96());
            tagsList.add(paragraphsList.get(i).getTag97());
            tagsList.add(paragraphsList.get(i).getTag98());
            tagsList.add(paragraphsList.get(i).getTag99()); 
            
            String data3 = "";
            for (int ii = 0; ii < tagsList.size(); ii++) {
                if (tagsList.get(ii) != null) {
                    Query query1 = entityManager.createNamedQuery("Tags.findById").setParameter("id", tagsList.get(ii));
                    try {
                        Tags selectedTag = (Tags) query1.getSingleResult();
                        System.out.println(selectedTag);
                        data3 = data3 + selectedTag.getTagname() + ", ";
                    } catch (NoResultException nre) {  
                        System.out.println("no tag");
                    }
                }
            }          
            Object[] row = {data0, data1, data2, data3};
            model.addRow(row);
        } 
    }
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void addInformantMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInformantMenuItemActionPerformed
        AddInformant ainfo = new AddInformant();
        ainfo.setVisible(true);
    }//GEN-LAST:event_addInformantMenuItemActionPerformed

    private void addInterviewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInterviewMenuItemActionPerformed
        AddInterview aint = new AddInterview();
        aint.setVisible(true);
    }//GEN-LAST:event_addInterviewMenuItemActionPerformed

    private void addTagMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTagMenuItemActionPerformed
        AddTag atag = new AddTag();
        atag.setVisible(true);
    }//GEN-LAST:event_addTagMenuItemActionPerformed

    private void editInformantsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editInformantsMenuItemActionPerformed
        ShowInformants sinf = new ShowInformants();
        sinf.setVisible(true);
    }//GEN-LAST:event_editInformantsMenuItemActionPerformed

    private void refreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMenuItemActionPerformed
        this.setVisible(false);
        MainWindow mw = new MainWindow();
        mw.setVisible(true);
    }//GEN-LAST:event_refreshMenuItemActionPerformed

    private void editInterviewsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editInterviewsMenuItemActionPerformed
        ShowInterviews sint = new ShowInterviews();
        sint.setVisible(true);
    }//GEN-LAST:event_editInterviewsMenuItemActionPerformed

    private void editTagsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTagsMenuItemActionPerformed
        ShowTags stag = new ShowTags();
        stag.setVisible(true);
    }//GEN-LAST:event_editTagsMenuItemActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        
        Interviews selectedNode;
        
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (node == null)
            return;
        
        if (node.isLeaf()) {
         //   try {
                selectedNode = (Interviews) node.getUserObject();
                popTable(selectedNode);
            //} catch (ClassCastException cce) {
              //  JOptionPane.showMessageDialog(null,"Please first add an interview.");
            //}
                
        }         
    }//GEN-LAST:event_jTree1ValueChanged

    private void showTransCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTransCheckBoxActionPerformed
        if (showTransCheckBox.isSelected()) {
            resultsTable.addColumn(transColumn);
            resultsTable.moveColumn(2, 1);
        }
        else {
            resultsTable.removeColumn(transColumn);
        }
    }//GEN-LAST:event_showTransCheckBoxActionPerformed

    private void interviewsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interviewsButtonActionPerformed
        ShowInterviews sint = new ShowInterviews();
        sint.setVisible(true);
    }//GEN-LAST:event_interviewsButtonActionPerformed

    private void informantsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informantsButtonActionPerformed
        ShowInformants sinf = new ShowInformants();
        sinf.setVisible(true);
    }//GEN-LAST:event_informantsButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ShowTags stag = new ShowTags();
        stag.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    public final void populateTree() {
        try {
            ArrayList list = new ArrayList();
            list.add("Informants");
            EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
            Query query = entityManager.createNamedQuery("Informants.findAll");
            List<Informants> informantsList = query.getResultList();
            for (Informants i : informantsList) {
                Object value[] = {i.getId().toString(), i.getNickname()};
                list.add(value);
            }
            
            Object hierarchy[] = list.toArray();
            DefaultMutableTreeNode root = processHierarchy(hierarchy);

            DefaultTreeModel treeModel = new DefaultTreeModel(root);
            jTree1.setModel(treeModel);
        } catch (Exception e) {
        }
    }
    
    public DefaultMutableTreeNode processHierarchy(Object[] hierarchy) {
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(hierarchy[0]);
            
        EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        Query query = entityManager.createNamedQuery("Informants.findAll");
        List<Informants> informantsList = query.getResultList();

        DefaultMutableTreeNode child, grandchild;
        for (Informants info : informantsList) {
            child = new DefaultMutableTreeNode(info);
            node.add(child);
            Query query2 = entityManager.createNamedQuery("Interviews.findByInformant").setParameter("informant", info);
            List<Interviews> interviewsList = query2.getResultList();
            for (Interviews inter : interviewsList) {    
                grandchild = new DefaultMutableTreeNode(inter);
                child.add(grandchild);                               
            }
        }        
        return (node);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager ColloquiumPUEntityManager;
    private javax.swing.JMenuItem addInformantMenuItem;
    private javax.swing.JMenuItem addInterviewMenuItem;
    private javax.swing.JMenuItem addTagMenuItem;
    private javax.swing.JMenuItem editInformantsMenuItem;
    private javax.swing.JMenuItem editInterviewsMenuItem;
    private javax.swing.JMenuItem editTagsMenuItem;
    private javax.swing.JButton informantsButton;
    private javax.swing.JButton interviewsButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JTable resultsTable;
    private javax.swing.JCheckBox showTransCheckBox;
    private javax.swing.JList<String> tagsList;
    private java.util.List<colloquium.Tags> tagsList1;
    private javax.persistence.Query tagsQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
