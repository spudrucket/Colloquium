/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package colloquium;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;



/**
 *
 * @author Mark_K
 */
public class AddParagraph extends javax.swing.JFrame implements ActionListener {
    
Informants selectedInformant;
Interviews selectedInterview;

    /**
     * Creates new form ImportParagraph
     */
    public AddParagraph() {
        initComponents();
        textTextArea.getDocument().addDocumentListener(new TextDocumentListener());
        transTextArea.getDocument().addDocumentListener(new TransDocumentListener());
        hasTranslationCheckBox.setSelected(true);
        wordWrapCheckBox.setSelected(true);
    }
    
    public AddParagraph(Informants informant, Interviews interview, boolean yesno) {
        selectedInformant = informant;
        selectedInterview = interview;
        initComponents();
        textTextArea.getDocument().addDocumentListener(new TextDocumentListener());
        transTextArea.getDocument().addDocumentListener(new TransDocumentListener()); 
        transTextArea.setEnabled(yesno);
        hasTranslationCheckBox.setSelected(yesno);
        wordWrapCheckBox.setSelected(true);
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        transTextArea = new javax.swing.JTextArea();
        textParagraphNumLabel = new javax.swing.JLabel();
        transParagraphNumLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        previewButton = new javax.swing.JButton();
        hasTranslationCheckBox = new javax.swing.JCheckBox();
        textLabel = new javax.swing.JLabel();
        transLabel = new javax.swing.JLabel();
        addParagraphButton = new javax.swing.JButton();
        wordWrapCheckBox = new javax.swing.JCheckBox();

        textTextArea.setColumns(20);
        textTextArea.setLineWrap(true);
        textTextArea.setRows(5);
        textTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(textTextArea);

        transTextArea.setColumns(20);
        transTextArea.setLineWrap(true);
        transTextArea.setRows(5);
        transTextArea.setToolTipText("");
        transTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(transTextArea);

        textParagraphNumLabel.setText("0");
        textParagraphNumLabel.setToolTipText("");

        transParagraphNumLabel.setText("0");

        jLabel1.setText("Number of paragraphs  =");

        jLabel2.setText("Number of paragraphs  =");

        previewButton.setText("Preview");
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });

        hasTranslationCheckBox.setText("Translation");
        hasTranslationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasTranslationCheckBoxActionPerformed(evt);
            }
        });

        textLabel.setText("Original Text");

        transLabel.setText("Translation");

        addParagraphButton.setText("Add Interview");
        addParagraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParagraphButtonActionPerformed(evt);
            }
        });

        wordWrapCheckBox.setText("Word Wrap");
        wordWrapCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordWrapCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(wordWrapCheckBox)
                        .addGap(158, 158, 158)
                        .addComponent(textLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(transLabel)
                        .addGap(279, 279, 279))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(191, 191, 191)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(textParagraphNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hasTranslationCheckBox)
                                .addGap(102, 102, 102)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(transParagraphNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addParagraphButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(previewButton))
                            .addComponent(jScrollPane2))
                        .addGap(17, 17, 17))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textLabel)
                    .addComponent(transLabel)
                    .addComponent(wordWrapCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textParagraphNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transParagraphNumLabel)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(previewButton)
                    .addComponent(hasTranslationCheckBox)
                    .addComponent(addParagraphButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
        ArrayList textArray = new ArrayList();
        ArrayList transArray = new ArrayList();
        String currentParagraph = "";
        
        textTextArea.append("\n");
        
        char[] charsText = textTextArea.getText().toCharArray();
        for (char c : charsText) {
            if (c != '\n') {
                currentParagraph = currentParagraph + (Character.toString(c));
            }
            else {
                if (!currentParagraph.isEmpty()) {
                    textArray.add(currentParagraph);
                    currentParagraph = "";
                }                
            }
        }
        
        if (hasTranslationCheckBox.isSelected()) {
            transTextArea.append("\n");
            currentParagraph = "";
            char[] charsTrans = transTextArea.getText().toCharArray();   
            for (char c : charsTrans) {
                if (c != '\n') {
                    currentParagraph = currentParagraph + (Character.toString(c));
                }
                else {
                    if (!currentParagraph.isEmpty()) {
                        transArray.add(currentParagraph);
                        currentParagraph = "";
                    }                
                }
            }
            if (transArray.size() == textArray.size()) {                
                ParagraphPreview pp = new ParagraphPreview(textArray, transArray);
                pp.setVisible(true);
            }
            else {
                JOptionPane.showMessageDialog(null,"Make sure you have the same number of paragraphs.");
            }
        }
        else {
            ParagraphPreview pp = new ParagraphPreview(textArray);
            pp.setVisible(true);
        }
    }//GEN-LAST:event_previewButtonActionPerformed

    private void hasTranslationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasTranslationCheckBoxActionPerformed
        if (hasTranslationCheckBox.isSelected()) {
            transTextArea.setEnabled(true);
        }
        else {
            transTextArea.setEnabled(false);
        }
    }//GEN-LAST:event_hasTranslationCheckBoxActionPerformed

    private void addParagraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParagraphButtonActionPerformed
        ArrayList textArray = new ArrayList();
        ArrayList transArray = new ArrayList();
        String currentParagraph = "";

        textTextArea.append("\n");
        char[] charsText = textTextArea.getText().toCharArray();   
        for (char c : charsText) {
            if (c != '\n') {
                currentParagraph = currentParagraph + (Character.toString(c));
            }
            else {
                if (!currentParagraph.isEmpty()) {
                    textArray.add(currentParagraph);
                    currentParagraph = "";
                }                
            }
        }
        
        if (hasTranslationCheckBox.isSelected()) {
            transTextArea.append("\n");
            currentParagraph = "";
            char[] charsTrans = transTextArea.getText().toCharArray();   
            for (char c : charsTrans) {
                if (c != '\n') {
                    currentParagraph = currentParagraph + (Character.toString(c));
                }
                else {
                    if (!currentParagraph.isEmpty()) {
                        transArray.add(currentParagraph);
                        currentParagraph = "";
                    }                
                }
            }
            if (transArray.size() == textArray.size()) {
                for (int i = 0; i < textArray.size(); i++) {
                Paragraphs newParagraph = new Paragraphs();
                newParagraph.setInformant(selectedInformant);
                newParagraph.setInterviewnumber(selectedInterview);
                newParagraph.setText(textArray.get(i).toString());
                newParagraph.setTrans(transArray.get(i).toString());
                newParagraph.setTags("");
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("ColloquiumPU");
                ParagraphsJpaController pjc = new ParagraphsJpaController(emf);
                pjc.create(newParagraph);
                this.setVisible(false);
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"Make sure you have the same number of paragraphs.");
            }
        }
        else {
            for (int i = 0; i < textArray.size(); i++) {
                Paragraphs newParagraph = new Paragraphs();
                newParagraph.setInformant(selectedInformant);
                newParagraph.setInterviewnumber(selectedInterview);
                newParagraph.setText(textArray.get(i).toString());
                newParagraph.setTags("");
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("ColloquiumPU");
                ParagraphsJpaController pjc = new ParagraphsJpaController(emf);
                pjc.create(newParagraph);
                this.setVisible(false);
            }            
        }                     
    }//GEN-LAST:event_addParagraphButtonActionPerformed

    private void wordWrapCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordWrapCheckBoxActionPerformed
        if (wordWrapCheckBox.isSelected()) {
            textTextArea.setLineWrap(true);
            transTextArea.setLineWrap(true);
        }
        else {
            textTextArea.setLineWrap(false);
            transTextArea.setLineWrap(false);
        }
    }//GEN-LAST:event_wordWrapCheckBoxActionPerformed

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    //Counts new line markers
    class TextDocumentListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            char[] chars = textTextArea.getText().toCharArray();
            int paragraphNum = 0;
            for (int i = 0; i < chars.length; i++) {
                if (chars[i] == '\n') {
                    paragraphNum++;
            }
            textParagraphNumLabel.setText(Integer.toString(paragraphNum));
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            char[] chars = textTextArea.getText().toCharArray();
            int paragraphNum = 0;
            for (int i = 0; i < chars.length; i++) {
                if (chars[i] == '\n') {
                    paragraphNum++;
            }
            textParagraphNumLabel.setText(Integer.toString(paragraphNum));
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            }
    }
    
    class TransDocumentListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            char[] chars = transTextArea.getText().toCharArray();
            int paragraphNum = 0;
            for (int i = 0; i < chars.length; i++) {
                if (chars[i] == '\n') {
                    paragraphNum++;
            }
            transParagraphNumLabel.setText(Integer.toString(paragraphNum));
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            char[] chars = transTextArea.getText().toCharArray();
            int paragraphNum = 0;
            for (int i = 0; i < chars.length; i++) {
                if (chars[i] == '\n') {
                    paragraphNum++;
            }
            transParagraphNumLabel.setText(Integer.toString(paragraphNum));
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddParagraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddParagraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddParagraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddParagraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddParagraph().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addParagraphButton;
    private javax.swing.JCheckBox hasTranslationCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton previewButton;
    private javax.swing.JLabel textLabel;
    private javax.swing.JLabel textParagraphNumLabel;
    private javax.swing.JTextArea textTextArea;
    private javax.swing.JLabel transLabel;
    private javax.swing.JLabel transParagraphNumLabel;
    private javax.swing.JTextArea transTextArea;
    private javax.swing.JCheckBox wordWrapCheckBox;
    // End of variables declaration//GEN-END:variables
}
