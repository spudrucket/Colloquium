/*
 * Copyright (C) 2016 spudrucket
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package spudrucket.github.io.Colloquium;

import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import org.apache.lucene.queryparser.classic.ParseException;
import spudrucket.github.io.Colloquium.exceptions.IllegalOrphanException;
import spudrucket.github.io.Colloquium.exceptions.NonexistentEntityException;

/**
 *
 * @author spudrucket
 */
public class UpdateTerms extends javax.swing.JFrame {
    
    SortedListModel jList1Model;

    /**
     * Creates new form UpdateTerms
     */
    public UpdateTerms(Terms term) {
        initComponents();              
        termsComboBox.setSelectedItem(term);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jFrame1 = new javax.swing.JFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        formsTextArea = new javax.swing.JTextArea();
        submitButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ColloquiumPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        termsQuery = java.beans.Beans.isDesignTime() ? null : ColloquiumPUEntityManager.createQuery("SELECT t FROM Terms t");
        termsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : termsQuery.getResultList();
        addFormButton = new javax.swing.JButton();
        formsTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jList1Model = new SortedListModel();
        jList1.setModel(jList1Model);
        jLabel1 = new javax.swing.JLabel();
        pasteButton = new javax.swing.JButton();
        updateTermButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        removeFormButton = new javax.swing.JButton();
        termsComboBox = new javax.swing.JComboBox<>();

        jFrame1.setMinimumSize(new java.awt.Dimension(505, 670));

        formsTextArea.setColumns(20);
        formsTextArea.setRows(5);
        jScrollPane4.setViewportView(formsTextArea);

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Copy/Paste or Type inflected");

        jLabel7.setText("forms one per line.");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(submitButton))
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)))
                .addGap(18, 18, 18)
                .addComponent(submitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addFormButton.setText("Add Form");
        addFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFormButtonActionPerformed(evt);
            }
        });

        formsTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formsTextFieldFocusGained(evt);
            }
        });
        formsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formsTextFieldKeyPressed(evt);
            }
        });

        jLabel2.setText("Forms: ");

        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Term: ");

        pasteButton.setText("Paste in Forms");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        updateTermButton.setText("Edit Terms");
        updateTermButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTermButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Inflected Forms List: ");

        removeFormButton.setText("Remove Form(s)");
        removeFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFormButtonActionPerformed(evt);
            }
        });

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, termsList, termsComboBox);
        bindingGroup.addBinding(jComboBoxBinding);

        termsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termsComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(removeFormButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pasteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(formsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                            .addComponent(termsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addFormButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(updateTermButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(termsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(formsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addFormButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(158, 158, 158)
                        .addComponent(pasteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeFormButton)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(updateTermButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String[] formsArray = formsTextArea.getText().split("\\n", -1);
        for (String s : formsArray) {
            if (!s.isEmpty()) {
                jList1Model.add(s);
            }
        }
        jFrame1.setVisible(false);
    }//GEN-LAST:event_submitButtonActionPerformed

    private void addFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFormButtonActionPerformed
        String term = formsTextField.getText();
        if (!term.isEmpty()) {
            jList1Model.add(term);
        }
    }//GEN-LAST:event_addFormButtonActionPerformed

    private void formsTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formsTextFieldFocusGained
        formsTextField.selectAll();
    }//GEN-LAST:event_formsTextFieldFocusGained

    private void formsTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formsTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String term = formsTextField.getText();
            if (!term.isEmpty()) {
                jList1Model.add(term);
            }
        }
    }//GEN-LAST:event_formsTextFieldKeyPressed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        jFrame1.setVisible(true);
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void updateTermButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTermButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Terms term = (Terms) termsComboBox.getSelectedItem();
        if (jList1Model.getSize() > 0) {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("ColloquiumPU");
            EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
            Query dbUsagesQuery = entityManager.createNamedQuery("Usages.findByTerm").setParameter("term", term);
            List<Usages> usagesList = dbUsagesQuery.getResultList();
            UsagesJpaController ujc = new UsagesJpaController(emf);
            for (Usages u : usagesList) {
                try {
                    ujc.destroy(u.getId());
                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(ShowTerms.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            String rootWord = term.getRootword();
            TermsJpaController tjc = new TermsJpaController(emf);
            try {
                tjc.destroy(term.getId());
            } catch (IllegalOrphanException ex) {
                Logger.getLogger(UpdateTerms.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(UpdateTerms.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            Terms newTerm = new Terms();
            newTerm.setRootword(rootWord);
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < jList1Model.getSize(); i++) {
                sb.append(jList1Model.getElementAt(i).toString());
                sb.append(", ");
            }
            newTerm.setForms(sb.toString());

            tjc.create(newTerm);
            int newTermId = newTerm.getId();

            int numUsages = 0;
            try {
                numUsages = LocalSearch.termSearch(newTerm);            
            } catch (IOException ex) {
                Logger.getLogger(AddTerm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(AddTerm.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (numUsages > 0) {
                Query query = entityManager.createNamedQuery("Terms.findById").setParameter("id", newTermId);
                Terms currentTerm = (Terms) query.getSingleResult();
                currentTerm.setOccurances(numUsages);
                try {
                    tjc.edit(currentTerm);
                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(AddTerm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(AddTerm.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.setVisible(false);
                ShowTerms st = new ShowTerms();
                st.setVisible(true);
            }
            else {
                try {
                    tjc.destroy(term.getId());
                } catch (IllegalOrphanException ex) {
                    Logger.getLogger(AddTerm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(AddTerm.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null,"No inflected forms found in any interviews.");
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"First please enter at least one inflected form.");
        }
        setCursor(null);
    }//GEN-LAST:event_updateTermButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void removeFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFormButtonActionPerformed
        List<String> termList = jList1.getSelectedValuesList();
        for (String s : termList) {
            jList1Model.removeElement(s);
        }
    }//GEN-LAST:event_removeFormButtonActionPerformed

    private void termsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termsComboBoxActionPerformed
        Terms selectedTerm = (Terms) termsComboBox.getSelectedItem();
        if (selectedTerm != null && !selectedTerm.getForms().isEmpty()) {
            jList1Model.clear();
            String[] forms = selectedTerm.getForms().split(" *, *");
            for (String s : forms) {
                if (!s.isEmpty()) {
                    jList1Model.add(s);
                }                        
            }         
        }
    }//GEN-LAST:event_termsComboBoxActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager ColloquiumPUEntityManager;
    private javax.swing.JButton addFormButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextArea formsTextArea;
    private javax.swing.JTextField formsTextField;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton pasteButton;
    private javax.swing.JButton removeFormButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JComboBox<Tags> termsComboBox;
    private java.util.List<spudrucket.github.io.Colloquium.Terms> termsList;
    private javax.persistence.Query termsQuery;
    private javax.swing.JButton updateTermButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
