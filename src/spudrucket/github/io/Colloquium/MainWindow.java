/*
 * Copyright (C) 2016 spudrucket
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package spudrucket.github.io.Colloquium;

import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.lucene.queryparser.classic.ParseException;

/**
 *
 * @author spudrucket
 */
public class MainWindow extends javax.swing.JFrame {
    
    TableColumn idColumn;
    TableColumn textColumn;
    TableColumn transColumn;
    TableColumn tagsColumn;
    Interviews currentInterview;
    List<Paragraphs> paragraphsList; 
    Font tableFont;
    

    

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        
        initComponents();
        popjList1();
        popFontSizeComboBox();
        fontSizeComboBox.setSelectedItem(12);
        fontChooserComboBox.setSelectedItem(searchTextField.getFont().getName());
        jList1.setComponentPopupMenu(jList1PopupMenu);
        resultsTable.setComponentPopupMenu(resultsTablePopupMenu);
        resultsTable.setDefaultRenderer(String.class, new LineWrapCellRenderer());
        
        idColumn = resultsTable.getColumnModel().getColumn(0);
        textColumn = resultsTable.getColumnModel().getColumn(1);
        transColumn = resultsTable.getColumnModel().getColumn(2);
        tagsColumn = resultsTable.getColumnModel().getColumn(3);
        resultsTable.removeColumn(idColumn);
        
        populateTree();
        try {
            copyBlankDatabase();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ColloquiumPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        tagsQuery = java.beans.Beans.isDesignTime() ? null : ColloquiumPUEntityManager.createQuery("SELECT t FROM Tags t");
        tagsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : tagsQuery.getResultList();
        jList1PopupMenu = new javax.swing.JPopupMenu();
        addTagPopupMenuItem = new javax.swing.JMenuItem();
        deletePopupMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        createTagPopupMenuItem = new javax.swing.JMenuItem();
        editTagPopupMenuItem = new javax.swing.JMenuItem();
        resultsTablePopupMenu = new javax.swing.JPopupMenu();
        editParagraphPopupMenuItem = new javax.swing.JMenuItem();
        deleteAllTagsPopupMenuItem = new javax.swing.JMenuItem();
        openFileChooser = new javax.swing.JFileChooser();
        saveFileChooser = new javax.swing.JFileChooser();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        informantsButton = new javax.swing.JButton();
        interviewsButton = new javax.swing.JButton();
        tagsButton = new javax.swing.JButton();
        queryButton = new javax.swing.JButton();
        domainButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        showTransCheckBox = new javax.swing.JCheckBox();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        fontSizeComboBox = new javax.swing.JComboBox<>();
        fontChooserComboBox = new com.xenoage.util.gui.FontChooserComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newProjectMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        addInformantMenuItem = new javax.swing.JMenuItem();
        addInterviewMenuItem = new javax.swing.JMenuItem();
        addTagMenuItem = new javax.swing.JMenuItem();
        newTermMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        editInformantsMenuItem = new javax.swing.JMenuItem();
        editInterviewsMenuItem = new javax.swing.JMenuItem();
        editParagraphsMenuItem = new javax.swing.JMenuItem();
        editTagsMenuItem = new javax.swing.JMenuItem();
        editTermsMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        refreshMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        backupMenuItem = new javax.swing.JMenuItem();
        restoreMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        importTagsMenuItem = new javax.swing.JMenuItem();
        exportTagsMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        exportMenuItem = new javax.swing.JMenuItem();

        addTagPopupMenuItem.setText("Add Tag");
        addTagPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagPopupMenuItemActionPerformed(evt);
            }
        });
        jList1PopupMenu.add(addTagPopupMenuItem);

        deletePopupMenuItem.setText("Delete Tag");
        deletePopupMenuItem.setActionCommand("Delete Tag(s)");
        deletePopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePopupMenuItemActionPerformed(evt);
            }
        });
        jList1PopupMenu.add(deletePopupMenuItem);
        jList1PopupMenu.add(jSeparator4);

        createTagPopupMenuItem.setText("New Tag");
        createTagPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTagPopupMenuItemActionPerformed(evt);
            }
        });
        jList1PopupMenu.add(createTagPopupMenuItem);

        editTagPopupMenuItem.setText("Edit Tags");
        editTagPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTagPopupMenuItemActionPerformed(evt);
            }
        });
        jList1PopupMenu.add(editTagPopupMenuItem);

        editParagraphPopupMenuItem.setText("Edit Paragraph");
        editParagraphPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editParagraphPopupMenuItemActionPerformed(evt);
            }
        });
        resultsTablePopupMenu.add(editParagraphPopupMenuItem);

        deleteAllTagsPopupMenuItem.setText("Delete All Tags");
        deleteAllTagsPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllTagsPopupMenuItemActionPerformed(evt);
            }
        });
        resultsTablePopupMenu.add(deleteAllTagsPopupMenuItem);

        saveFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Colloquium");
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        jTree1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setRootVisible(false);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTree1);

        resultsTable.setBorder(new javax.swing.border.MatteBorder(null));
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Text", "Translation", "Tags"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setInheritsPopupMenu(true);
        resultsTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        resultsTable.getTableHeader().setReorderingAllowed(false);
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(resultsTable);
        if (resultsTable.getColumnModel().getColumnCount() > 0) {
            resultsTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            resultsTable.getColumnModel().getColumn(3).setMaxWidth(200);
        }

        jToolBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setMaximumSize(new java.awt.Dimension(32769, 50));
        jToolBar1.setMinimumSize(new java.awt.Dimension(800, 50));
        jToolBar1.setOpaque(false);
        jToolBar1.setPreferredSize(new java.awt.Dimension(1284, 50));

        informantsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spudrucket/github/io/Colloquium/person-icon.png"))); // NOI18N
        informantsButton.setToolTipText("Informants");
        informantsButton.setFocusable(false);
        informantsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        informantsButton.setMaximumSize(new java.awt.Dimension(50, 50));
        informantsButton.setMinimumSize(new java.awt.Dimension(50, 50));
        informantsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        informantsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informantsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(informantsButton);

        interviewsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spudrucket/github/io/Colloquium/text_bubble.png"))); // NOI18N
        interviewsButton.setToolTipText("Interviews");
        interviewsButton.setFocusable(false);
        interviewsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        interviewsButton.setMaximumSize(new java.awt.Dimension(50, 50));
        interviewsButton.setMinimumSize(new java.awt.Dimension(50, 50));
        interviewsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        interviewsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interviewsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(interviewsButton);

        tagsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spudrucket/github/io/Colloquium/tag.png"))); // NOI18N
        tagsButton.setToolTipText("Tags");
        tagsButton.setFocusable(false);
        tagsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tagsButton.setMaximumSize(new java.awt.Dimension(50, 50));
        tagsButton.setMinimumSize(new java.awt.Dimension(50, 50));
        tagsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tagsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(tagsButton);

        queryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spudrucket/github/io/Colloquium/search.png"))); // NOI18N
        queryButton.setToolTipText("Search");
        queryButton.setFocusable(false);
        queryButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        queryButton.setMaximumSize(new java.awt.Dimension(50, 50));
        queryButton.setMinimumSize(new java.awt.Dimension(50, 50));
        queryButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        queryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(queryButton);

        domainButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spudrucket/github/io/Colloquium/lamp.png"))); // NOI18N
        domainButton.setToolTipText("Terms");
        domainButton.setFocusable(false);
        domainButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        domainButton.setMaximumSize(new java.awt.Dimension(50, 50));
        domainButton.setMinimumSize(new java.awt.Dimension(50, 50));
        domainButton.setPreferredSize(new java.awt.Dimension(50, 50));
        domainButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        domainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                domainButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(domainButton);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spudrucket/github/io/Colloquium/refresh.png"))); // NOI18N
        jButton1.setToolTipText("Refresh");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jList1.setInheritsPopupMenu(true);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jList1);

        showTransCheckBox.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        showTransCheckBox.setSelected(true);
        showTransCheckBox.setText("Translation");
        showTransCheckBox.setToolTipText("Show/Hide Translation");
        showTransCheckBox.setFocusable(false);
        showTransCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showTransCheckBox.setOpaque(false);
        showTransCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showTransCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTransCheckBoxActionPerformed(evt);
            }
        });

        searchTextField.setFont(searchTextField.getFont());
        searchTextField.setText("Search in this interview");
        searchTextField.setMaximumSize(new java.awt.Dimension(200, 26));
        searchTextField.setMinimumSize(new java.awt.Dimension(200, 26));
        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        searchButton.setText("Search");
        searchButton.setToolTipText("Search this interview");
        searchButton.setFocusable(false);
        searchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        fontSizeComboBox.setEditable(true);
        fontSizeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizeComboBoxActionPerformed(evt);
            }
        });

        fontChooserComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontChooserComboBoxActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        newProjectMenuItem.setText("New Project");
        newProjectMenuItem.setToolTipText("");
        newProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newProjectMenuItem);
        fileMenu.add(jSeparator1);

        addInformantMenuItem.setText("New Informant");
        addInformantMenuItem.setActionCommand("Add Informants");
        addInformantMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInformantMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(addInformantMenuItem);

        addInterviewMenuItem.setText("New Interview");
        addInterviewMenuItem.setToolTipText("");
        addInterviewMenuItem.setActionCommand("Add Interviews");
        addInterviewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInterviewMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(addInterviewMenuItem);

        addTagMenuItem.setText("New Tag");
        addTagMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(addTagMenuItem);

        newTermMenuItem.setText("New Term");
        newTermMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTermMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newTermMenuItem);
        fileMenu.add(jSeparator2);

        editInformantsMenuItem.setText("Edit Informants");
        editInformantsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editInformantsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(editInformantsMenuItem);

        editInterviewsMenuItem.setText("Edit Interviews");
        editInterviewsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editInterviewsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(editInterviewsMenuItem);

        editParagraphsMenuItem.setText("Edit Paragraphs");
        editParagraphsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editParagraphsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(editParagraphsMenuItem);

        editTagsMenuItem.setText("Edit Tags");
        editTagsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTagsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(editTagsMenuItem);

        editTermsMenuItem.setText("Edit Terms");
        editTermsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTermsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(editTermsMenuItem);
        fileMenu.add(jSeparator3);

        refreshMenuItem.setText("Refresh");
        refreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(refreshMenuItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        backupMenuItem.setText("Backup Project");
        backupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(backupMenuItem);

        restoreMenuItem.setText("Restore from Backup");
        restoreMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(restoreMenuItem);
        editMenu.add(jSeparator7);

        importTagsMenuItem.setText("Import Tag List");
        importTagsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importTagsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(importTagsMenuItem);

        exportTagsMenuItem.setText("Export Tags List");
        exportTagsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTagsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(exportTagsMenuItem);
        editMenu.add(jSeparator5);

        exportMenuItem.setText("Export Database");
        exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(exportMenuItem);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1012, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fontChooserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fontSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showTransCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(searchButton)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(showTransCheckBox))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fontChooserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fontSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void copyBlankDatabase() throws IOException {
        
       File etc = new File("etc");
       if (!etc.exists() && !etc.isDirectory()) {
           etc.mkdir();
       }        
        File blankDb = new File("etc" + File.separator + "colloquiumdb");
        if (!blankDb.exists()) {

           try {
               ExportFile.backupBlankDb(etc);
           } catch (SQLException ex) {
               Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
    }   
    
    private void popFontSizeComboBox() {
        int[] fontSizes = {8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72};
        for (int i : fontSizes) {
            fontSizeComboBox.addItem(i);
        }
    }
    
    public void popjList1() {
        EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        Query query = entityManager.createQuery("SELECT t.tagname FROM Tags t");
        List<String> tagnames = query.getResultList();
        SortedListModel jList1Model = new SortedListModel();
        for (String s : tagnames) {
            jList1Model.add(s);
        }
        jList1.setModel(jList1Model);
    }
    
    private LinkedList getSelectedParagraphs() {
        EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        LinkedList<Paragraphs> paragraphsList = new LinkedList();
        int[] rows = resultsTable.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            int currentId = Integer.parseInt(resultsTable.getModel().getValueAt(rows[i], 0).toString());
            Query query = entityManager.createNamedQuery("Paragraphs.findById").setParameter("id", currentId);
            paragraphsList.addAll(query.getResultList());
        }
        return paragraphsList;
    }
    
    private void addParagraphTags() {
        List<String> newTagsList;
        if (resultsTable.isColumnSelected(resultsTable.getSelectedColumn())) {
            DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
            newTagsList = jList1.getSelectedValuesList();                                    
            LinkedList<Paragraphs> selectedParagraphs = getSelectedParagraphs();
            int[] rows = resultsTable.getSelectedRows();
            int tagsColumn = resultsTable.getModel().getColumnCount() -1;

            int count = 0;
            for (Paragraphs p : selectedParagraphs) {
                TreeSet<String> newTags = new TreeSet();
                String oldTagsString = p.getTags();
                if (oldTagsString != null && !oldTagsString.isEmpty()) {
                   String[] oldTagsArray = oldTagsString.split(" *, *");                        
                   newTags.addAll(Arrays.asList(oldTagsArray));
                }                     
                for (String s : newTagsList) {
                    newTags.add(s);
                }
                StringBuilder sb = new StringBuilder();
                for (String s : newTags) {
                    sb.append(s);
                    sb.append(", ");
                }

                p.setTags(sb.toString());
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("ColloquiumPU");
                ParagraphsJpaController pjc = new ParagraphsJpaController(emf);
                try {
                    pjc.edit(p);
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                                               
                model.setValueAt(sb.toString(), rows[count], tagsColumn);
                count++;
            }
        }
    }
    
    private void popTable(Interviews interview) {
        DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
        
        model.setRowCount(0);
        
        EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        Query query = entityManager.createNamedQuery("Paragraphs.findByInterviewnumber").setParameter("interviewnumber", interview);
        paragraphsList = query.getResultList();

        for (Paragraphs p : paragraphsList) {
            int data0 = p.getId();
            String data1 = p.getText();
            String data2 = p.getTrans();
            String data3 = p.getTags();                                  
            Object[] row = {data0, data1, data2, data3};
            model.addRow(row);
        } 
    }
    
    private void newProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectMenuItemActionPerformed

        int result = JOptionPane.showConfirmDialog(this,"Backup existing project first? \nAll current data will be lost.", "New Project",JOptionPane.YES_NO_CANCEL_OPTION);
                switch(result) {
                    case 0 :
                        backupDb();
                        ImportFile.createNewDb();
                        this.setVisible(false);
                        MainWindow mw1 = new MainWindow();
                        mw1.setVisible(true);
                        break;
                    case 1 :                        
                        ImportFile.createNewDb();
                        this.setVisible(false);
                        MainWindow mw2 = new MainWindow();
                        mw2.setVisible(true);
                        break;
                    case 2 :                        
                        break;
                }
    }//GEN-LAST:event_newProjectMenuItemActionPerformed

    private void addInformantMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInformantMenuItemActionPerformed
        AddInformant ainfo = new AddInformant(this);
        ainfo.setVisible(true);
    }//GEN-LAST:event_addInformantMenuItemActionPerformed

    private void addInterviewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInterviewMenuItemActionPerformed
        AddInterview aint = new AddInterview(this);
        aint.setVisible(true);
    }//GEN-LAST:event_addInterviewMenuItemActionPerformed

    private void addTagMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTagMenuItemActionPerformed
        AddTag atag = new AddTag(this);
        atag.setVisible(true);
    }//GEN-LAST:event_addTagMenuItemActionPerformed

    private void editInformantsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editInformantsMenuItemActionPerformed
        ShowInformants sinf = new ShowInformants(this);
        sinf.setVisible(true);
    }//GEN-LAST:event_editInformantsMenuItemActionPerformed

    private void refreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMenuItemActionPerformed
        this.setVisible(false);
        MainWindow mw = new MainWindow();
        mw.setVisible(true);
    }//GEN-LAST:event_refreshMenuItemActionPerformed

    private void editInterviewsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editInterviewsMenuItemActionPerformed
        ShowInterviews sint = new ShowInterviews(this);
        sint.setVisible(true);
    }//GEN-LAST:event_editInterviewsMenuItemActionPerformed

    private void editTagsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTagsMenuItemActionPerformed
        ShowTags stag = new ShowTags(this);
        stag.setVisible(true);
    }//GEN-LAST:event_editTagsMenuItemActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (node == null)
            return;
        
        if (node.isLeaf()) {
            try {
                currentInterview = (Interviews) node.getUserObject();
                popTable(currentInterview);
            } catch (ClassCastException cce) {
            }
                
        }         
    }//GEN-LAST:event_jTree1ValueChanged

    private void interviewsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interviewsButtonActionPerformed
        ShowInterviews sint = new ShowInterviews(this);
        sint.setVisible(true);
    }//GEN-LAST:event_interviewsButtonActionPerformed

    private void informantsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informantsButtonActionPerformed
        ShowInformants sinf = new ShowInformants(this);
        sinf.setVisible(true);
    }//GEN-LAST:event_informantsButtonActionPerformed

    private void tagsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagsButtonActionPerformed
        ShowTags stag = new ShowTags(this);
        stag.setVisible(true);
    }//GEN-LAST:event_tagsButtonActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (evt.getClickCount() == 2) {
            addParagraphTags();
        }
        if (evt.getButton() == MouseEvent.BUTTON3) {
            jList1PopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void editParagraphsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editParagraphsMenuItemActionPerformed
        ShowParagraphs sp = new ShowParagraphs();
        sp.setVisible(true);
    }//GEN-LAST:event_editParagraphsMenuItemActionPerformed

    private void deletePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePopupMenuItemActionPerformed
        List<String> newTagsList;
        if (resultsTable.isColumnSelected(resultsTable.getSelectedColumn())) {
            EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
            DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
            newTagsList = jList1.getSelectedValuesList();                                    
            LinkedList<Paragraphs> selectedParagraphs = getSelectedParagraphs();
            int[] rows = resultsTable.getSelectedRows();
            int tagsColumn = resultsTable.getModel().getColumnCount() -1;
            int count = 0;

            for (Paragraphs p : selectedParagraphs) {
                TreeSet<String> newTags = new TreeSet();
                String oldTagsString = p.getTags();
                if (!oldTagsString.isEmpty()) {
                   String[] oldTagsArray = oldTagsString.split(" *, *", -1);                        
                   newTags.addAll(Arrays.asList(oldTagsArray));
                }                     
                for (String s : newTagsList) {
                    newTags.remove(s);
                }
                StringBuilder sb = new StringBuilder();
                for (String s : newTags) {
                    sb.append(s);
                    sb.append(", ");
                }

                p.setTags(sb.toString());
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("ColloquiumPU");
                ParagraphsJpaController pjc = new ParagraphsJpaController(emf);
                try {
                    pjc.edit(p);
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                model.setValueAt(sb.toString(), rows[count], tagsColumn);
                count++;
            }           
        }
    }//GEN-LAST:event_deletePopupMenuItemActionPerformed

    private void addTagPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTagPopupMenuItemActionPerformed
        addParagraphTags();
    }//GEN-LAST:event_addTagPopupMenuItemActionPerformed

    private void createTagPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTagPopupMenuItemActionPerformed
        AddTag at = new AddTag(this);
        at.setVisible(true);
    }//GEN-LAST:event_createTagPopupMenuItemActionPerformed

    private void editTagPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTagPopupMenuItemActionPerformed
        ShowTags st = new ShowTags(this);
        st.setVisible(true);
    }//GEN-LAST:event_editTagPopupMenuItemActionPerformed

    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            resultsTablePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_resultsTableMouseClicked

    private void queryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryButtonActionPerformed
        SearchWindow sw = new SearchWindow(tableFont);
        sw.setVisible(true);
    }//GEN-LAST:event_queryButtonActionPerformed

    private void editParagraphPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editParagraphPopupMenuItemActionPerformed
        if (resultsTable.isRowSelected(resultsTable.getSelectedRow())) {
            EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
            int row = resultsTable.getSelectedRow();        
            int currentId = Integer.parseInt(resultsTable.getModel().getValueAt(row, 0).toString());
            Query query = entityManager.createNamedQuery("Paragraphs.findById").setParameter("id", currentId);
            List<Paragraphs> selectedParagraphs = query.getResultList();
            
           
            UpdateParagraphs up = new UpdateParagraphs(selectedParagraphs.get(0));
            up.setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(null,"No paragraph selected.");
        }                    
    }//GEN-LAST:event_editParagraphPopupMenuItemActionPerformed

    private void deleteAllTagsPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllTagsPopupMenuItemActionPerformed
        LinkedList<Paragraphs> selectedParagraphs = getSelectedParagraphs();
        if (selectedParagraphs.size() > 0) {
            EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
            DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
            int[] rows = resultsTable.getSelectedRows();
            int tagsColumn = resultsTable.getModel().getColumnCount() -1;
            int count = 0;
            for (Paragraphs p : selectedParagraphs) {
                p.setTags("");
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("ColloquiumPU");
                ParagraphsJpaController pjc = new ParagraphsJpaController(emf);
                try {
                    pjc.edit(p);
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                model.setValueAt("", rows[count], tagsColumn);
                count++;
            }
        }                       
    }//GEN-LAST:event_deleteAllTagsPopupMenuItemActionPerformed

    private void search() {
        if (paragraphsList != null && paragraphsList.size() > 0) {
            LinkedList<String> selectedId = new LinkedList();
            if (!searchTextField.getText().isEmpty()) {
                try {
                    selectedId = LocalSearch.searchText(paragraphsList, searchTextField.getText());
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (selectedId.isEmpty()) {
                    JOptionPane.showMessageDialog(null,"No results found.");
                }
                else {
                    resultsTable.getSelectionModel().clearSelection();
                    int totalRows = resultsTable.getRowCount();
                    for (String s : selectedId) {
                        int currentId = Integer.parseInt(s);
                        for (int i = 0; i < totalRows; i++) {
                            if (resultsTable.getModel().getValueAt(i, 0).equals(currentId)) {
                                resultsTable.getSelectionModel().addSelectionInterval(i, i);
                            }
                        }                    
                    }
                }
            }
        }
    }
    
    private void importTagsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importTagsMenuItemActionPerformed
        int result = JOptionPane.showConfirmDialog(this,"Export existing tags first? \nAll current tags will be lost.", "Export Tags",JOptionPane.YES_NO_CANCEL_OPTION);
                switch(result) {
                    case 0 :
                        exportTags();
                        importTags();
                        this.setVisible(false);
                        MainWindow mw1 = new MainWindow();
                        mw1.setVisible(true);
                        break;
                    case 1 :
                        importTags();
                        this.setVisible(false);
                        MainWindow mw2 = new MainWindow();
                        mw2.setVisible(true);
                        break;
                    case 2 :                        
                        break;
                }
    }//GEN-LAST:event_importTagsMenuItemActionPerformed

    private void importTags() {
        openFileChooser.setFileFilter(new FileNameExtensionFilter("txt file","txt"));
        int returnVal = openFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            File file = openFileChooser.getSelectedFile();
            try {
                ImportFile.importTags(file);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            setCursor(null);
        }
    }
    
    private void exportTags() {
        saveFileChooser.setSelectedFile(new File("tags.txt"));
        saveFileChooser.setFileFilter(new FileNameExtensionFilter("txt file","txt"));
        int returnVal = saveFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            File file = saveFileChooser.getSelectedFile();
            if (file.exists()) {
                int result = JOptionPane.showConfirmDialog(this,"Overwrite existing file?","Warning",JOptionPane.YES_NO_CANCEL_OPTION);
                switch(result) {
                    case 0 :
                        try {
                            ExportFile.exportTags(file);
                        } catch (IOException ex) {
                            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    case 1 :
                        break;
                    case 2 :
                        break;
                }
            }
            else {
                try {
                    ExportFile.exportTags(file);
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            setCursor(null);
        }
    }
    
    private void exportTagsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTagsMenuItemActionPerformed
        exportTags();
    }//GEN-LAST:event_exportTagsMenuItemActionPerformed

    private void exportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuItemActionPerformed
        exportDb();
    }//GEN-LAST:event_exportMenuItemActionPerformed

    private void exportDb() {
        saveFileChooser.setSelectedFile(new File("ColloquiumExport.txt"));
        saveFileChooser.setFileFilter(new FileNameExtensionFilter("txt file","txt"));
        int returnVal = saveFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            File file = saveFileChooser.getSelectedFile();
            if (file.exists()) {
                int result = JOptionPane.showConfirmDialog(this,"Overwrite existing file?","Warning",JOptionPane.YES_NO_CANCEL_OPTION);
                switch(result) {
                    case 0 :
                        try {
                            ExportFile.exportDatabase(file);
                        } catch (IOException ex) {
                            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    case 1 :
                        break;
                    case 2 :
                        break;
                }
            }
            else {
                try {
                    ExportFile.exportDatabase(file);
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            setCursor(null);
        }
    }
    
    // not currently implemented because of potential problems with auto ID numbering
    private void importDb() {
        openFileChooser.setFileFilter(new FileNameExtensionFilter("txt file","txt"));
        int returnVal = openFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            File file = openFileChooser.getSelectedFile();
            try {
                ImportFile.importBackup(file);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            setCursor(null);
        }
    }
    
    private void backupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupMenuItemActionPerformed
        backupDb();
    }//GEN-LAST:event_backupMenuItemActionPerformed

    private void backupDb() {
        saveFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = saveFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            File file = saveFileChooser.getSelectedFile();
            File tempDb = new File(file.getPath() + File.separator + "colloquiumdb" + File.separator);
            if (tempDb.exists()) {
                JOptionPane.showMessageDialog(null,"Please select a different folder");
                backupDb();
            }
            else {

                try {
                    ExportFile.backupDb(file);
                } catch (SQLException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }               
            }
            setCursor(null);
        }
    }
    
    private void restoreDb() throws SQLException, ClassNotFoundException {
        openFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = openFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            File file = openFileChooser.getSelectedFile();            
            ImportFile.restoreDb(file);            
            setCursor(null);
        }
    }
    
    private void restoreMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreMenuItemActionPerformed
        int result = JOptionPane.showConfirmDialog(this,"Backup existing info first? \nAll current info will be lost.", "Restore Database",JOptionPane.YES_NO_CANCEL_OPTION);
                switch(result) {
                    case 0 :
                        backupDb();
                        {
                            try {
                                restoreDb();
                            } catch (SQLException ex) {
                                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        this.setVisible(false);
                        MainWindow mw1 = new MainWindow();
                        mw1.setVisible(true);
                        break;
                    case 1 :
                        {
                            try {
                                restoreDb();
                            } catch (SQLException ex) {
                                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        this.setVisible(false);
                        MainWindow mw2 = new MainWindow();
                        mw2.setVisible(true);
                        break;
                    case 2 :                        
                        break;
                }
    }//GEN-LAST:event_restoreMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        MainWindow mw = new MainWindow();
        mw.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fontChooserComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontChooserComboBoxActionPerformed
        Font selectedFont = new Font(fontChooserComboBox.getSelectedFontName(), Font.PLAIN, (int) fontSizeComboBox.getSelectedItem());
        tableFont = selectedFont;
        resultsTable.setFont(tableFont);
    }//GEN-LAST:event_fontChooserComboBoxActionPerformed

    private void fontSizeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizeComboBoxActionPerformed
        Font selectedFont = new Font(fontChooserComboBox.getSelectedFontName(), Font.PLAIN, (int) fontSizeComboBox.getSelectedItem());
        tableFont = selectedFont;
        resultsTable.setFont(tableFont);
    }//GEN-LAST:event_fontSizeComboBoxActionPerformed

    private void showTransCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTransCheckBoxActionPerformed
        if (showTransCheckBox.isSelected()) {
            resultsTable.addColumn(transColumn);
            resultsTable.moveColumn(2, 1);
        }
        else {
            resultsTable.removeColumn(transColumn);
        }
    }//GEN-LAST:event_showTransCheckBoxActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        search();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            search();
        }
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained
        searchTextField.selectAll();
    }//GEN-LAST:event_searchTextFieldFocusGained

    private void domainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_domainButtonActionPerformed
        ShowTerms st = new ShowTerms();
        st.setVisible(true);
    }//GEN-LAST:event_domainButtonActionPerformed

    private void newTermMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTermMenuItemActionPerformed
        AddTerm at = new AddTerm();
        at.setVisible(true);
    }//GEN-LAST:event_newTermMenuItemActionPerformed

    private void editTermsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTermsMenuItemActionPerformed
        ShowTerms st = new ShowTerms();
        st.setVisible(true);
    }//GEN-LAST:event_editTermsMenuItemActionPerformed

    public final void populateTree() {
        try {
            LinkedList list = new LinkedList();
            list.add("Informants");
            EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
            Query query = entityManager.createNamedQuery("Informants.findAll");
            List<Informants> informantsList = query.getResultList();
            for (Informants i : informantsList) {
                Object value[] = {i.getId().toString(), i.getNickname()};
                list.add(value);
            }
            
            Object hierarchy[] = list.toArray();
            DefaultMutableTreeNode root = processHierarchy(hierarchy);

            DefaultTreeModel treeModel = new DefaultTreeModel(root);
            jTree1.setModel(treeModel);
        } catch (Exception e) {
        }
    }
    
    public DefaultMutableTreeNode processHierarchy(Object[] hierarchy) {
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(hierarchy[0]);
            
        EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        Query query = entityManager.createNamedQuery("Informants.findAll");
        List<Informants> informantsList = query.getResultList();

        DefaultMutableTreeNode child, grandchild;
        for (Informants info : informantsList) {
            child = new DefaultMutableTreeNode(info);
            node.add(child);
            Query query2 = entityManager.createNamedQuery("Interviews.findByInformant").setParameter("informant", info);
            List<Interviews> interviewsList = query2.getResultList();
            for (Interviews inter : interviewsList) {    
                grandchild = new DefaultMutableTreeNode(inter);
                child.add(grandchild);                               
            }
        }        
        return (node);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager ColloquiumPUEntityManager;
    private javax.swing.JMenuItem addInformantMenuItem;
    private javax.swing.JMenuItem addInterviewMenuItem;
    private javax.swing.JMenuItem addTagMenuItem;
    private javax.swing.JMenuItem addTagPopupMenuItem;
    private javax.swing.JMenuItem backupMenuItem;
    private javax.swing.JMenuItem createTagPopupMenuItem;
    private javax.swing.JMenuItem deleteAllTagsPopupMenuItem;
    private javax.swing.JMenuItem deletePopupMenuItem;
    private javax.swing.JButton domainButton;
    private javax.swing.JMenuItem editInformantsMenuItem;
    private javax.swing.JMenuItem editInterviewsMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem editParagraphPopupMenuItem;
    private javax.swing.JMenuItem editParagraphsMenuItem;
    private javax.swing.JMenuItem editTagPopupMenuItem;
    private javax.swing.JMenuItem editTagsMenuItem;
    private javax.swing.JMenuItem editTermsMenuItem;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenuItem exportTagsMenuItem;
    private javax.swing.JMenu fileMenu;
    private com.xenoage.util.gui.FontChooserComboBox fontChooserComboBox;
    private javax.swing.JComboBox<Integer> fontSizeComboBox;
    private javax.swing.JMenuItem importTagsMenuItem;
    private javax.swing.JButton informantsButton;
    private javax.swing.JButton interviewsButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPopupMenu jList1PopupMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem newProjectMenuItem;
    private javax.swing.JMenuItem newTermMenuItem;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JButton queryButton;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JMenuItem restoreMenuItem;
    private javax.swing.JTable resultsTable;
    private javax.swing.JPopupMenu resultsTablePopupMenu;
    private javax.swing.JFileChooser saveFileChooser;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JCheckBox showTransCheckBox;
    private javax.swing.JButton tagsButton;
    private java.util.List<spudrucket.github.io.Colloquium.Tags> tagsList;
    private javax.persistence.Query tagsQuery;
    // End of variables declaration//GEN-END:variables
}
