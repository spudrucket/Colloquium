/*
 * Copyright (C) 2016 Spudrucket
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package spudrucket.github.io.Colloquium;

import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import spudrucket.github.io.Colloquium.exceptions.NonexistentEntityException;


/**
 *
 * @author spudrucket
 */
public class ShowUsages extends javax.swing.JFrame {

    List<Usages> usagesList;
    Terms term;
    int idColumn = 0;
    int termColumn = 3;
    boolean hasTerm = false;
    
    /**
     * Creates new form ShowUsages
     */
    public ShowUsages() {
        initComponents();
        EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        Query dbQuery = entityManager.createNamedQuery("Usages.findAll");
        this.usagesList = dbQuery.getResultList();
        jTable1.setDefaultRenderer(String.class, new LineWrapCellRenderer());
        popTable();
    }
    
    public ShowUsages (Terms term) {
        initComponents();
        this.term = term;
        hasTerm = true;
        EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
        Query dbQuery = entityManager.createNamedQuery("Usages.findByTerm").setParameter("term", term);
        this.usagesList = dbQuery.getResultList();
        jTable1.setDefaultRenderer(String.class, new LineWrapCellRenderer());
        popTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveFileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTable1.setAutoCreateRowSorter(true);
        deleteButton = new javax.swing.JButton();
        exportTableButton = new javax.swing.JButton();

        saveFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setTitle("Show Usages");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Informant", "Interview", "Term", "Inflected Form", "Usage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(10);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(1).setMinWidth(50);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(200);
            jTable1.getColumnModel().getColumn(2).setMinWidth(50);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(200);
            jTable1.getColumnModel().getColumn(3).setMinWidth(50);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(200);
            jTable1.getColumnModel().getColumn(4).setMinWidth(50);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(200);
        }

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        exportTableButton.setText("Export Usages");
        exportTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1106, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(exportTableButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(exportTableButton))
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private LinkedList getSelectedUsages() {
        LinkedList<Integer> usagesId = new LinkedList();
        if (jTable1.isRowSelected(jTable1.getSelectedRow())) {            
            int[] rowArray = jTable1.getSelectedRows();
            for (int i : rowArray) {
                usagesId.add((Integer) jTable1.getModel().getValueAt(i, idColumn));
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"Please first select an occurance.");
        }
        return usagesId;
    }
    
    private TreeSet getSelectedTerms() {
        TreeSet<String> termsList = new TreeSet();
        int[] rowArray = jTable1.getSelectedRows();
            for (int i : rowArray) {
                termsList.add((String) jTable1.getModel().getValueAt(i, termColumn));
            }
        return termsList;
    }
    
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        LinkedList<Integer> usagesId = getSelectedUsages();
        TreeSet<String> termsList = getSelectedTerms();                
        if (!usagesId.isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this occurance?");
            if (confirm == 0) {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("ColloquiumPU");
                UsagesJpaController ujc = new UsagesJpaController(emf);   
                for (int i : usagesId) {
                    
                    try {
                    ujc.destroy(i);
                    } catch (spudrucket.github.io.Colloquium.exceptions.NonexistentEntityException ex) {
                        Logger.getLogger(ShowTerms.class.getName()).log(Level.SEVERE, null, ex);
                    } 
                }
                EntityManager entityManager = Persistence.createEntityManagerFactory("ColloquiumPU").createEntityManager();
                TermsJpaController tjc = new TermsJpaController(emf);
                for (String s : termsList) {
                    Query query2 = entityManager.createNamedQuery("Terms.findByRootword").setParameter("rootword", s);
                    Terms term = (Terms) query2.getSingleResult();
                    Query query = entityManager.createNamedQuery("Usages.findByTerm").setParameter("term", term);
                    int numUsages = query.getResultList().size();                
                    term.setOccurances(numUsages);
                        try {
                            tjc.edit(term);
                        } catch (NonexistentEntityException ex) {
                            Logger.getLogger(ShowUsages.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (Exception ex) {
                            Logger.getLogger(ShowUsages.class.getName()).log(Level.SEVERE, null, ex);
                        }
                }
                this.setVisible(false);
                if (hasTerm) {
                    ShowUsages su = new ShowUsages(term);
                    su.setVisible(true);
                }
                else {
                    ShowUsages su = new ShowUsages();
                    su.setVisible(true);
                }
            }           
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void exportTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTableButtonActionPerformed
        exportTable();
    }//GEN-LAST:event_exportTableButtonActionPerformed

    private void popTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        for (Usages u : usagesList) {
            int data0 = u.getId();
            String data1 = u.getParagraph().getInformant().toString();
            String data2 = u.getParagraph().getInterviewnumber().toString();
            String data3 = u.getTerm().toString();
            String data4 = u.getForm();
            String data5 = u.getSentence();
            Object[] row = {data0, data1, data2, data3, data4, data5};
            model.addRow(row);
        } 
    }
    
    private void exportTable() {
        saveFileChooser.setSelectedFile(new File("table.txt"));
        saveFileChooser.setFileFilter(new FileNameExtensionFilter("txt file","txt"));
        int returnVal = saveFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            File file = saveFileChooser.getSelectedFile();
            if (file.exists()) {
                int result = JOptionPane.showConfirmDialog(this,"Overwrite existing file?","Warning",JOptionPane.YES_NO_CANCEL_OPTION);
                switch(result) {
                    case 0 :
                {
                    try {
                        ExportFile.exportTable(jTable1, file);
                    } catch (IOException ex) {
                        Logger.getLogger(SearchWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                        break;
                    case 1 :
                        break;
                    case 2 :
                        break;
                }
            }
            else {
                try {
                    ExportFile.exportTable(jTable1, file);
                } catch (IOException ex) {
                    Logger.getLogger(SearchWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            setCursor(null);
        }       
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exportTableButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JFileChooser saveFileChooser;
    // End of variables declaration//GEN-END:variables
}
